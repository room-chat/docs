@startuml User-Authentication

skinparam SequenceMessageAlignment center

actor user
participant "Front-end" as frontEnd
participant BFF as bff
participant Kafka as kafka
participant "User Manage" as userManage
participant Database as database

== User Sign up ==
user -> frontEnd : user enter
frontEnd -> bff :  POST /create-user
bff -> kafka: PUB create-user
note right of bff
    payload: email, dayOfBirth, address, password, 
    city, firstName, lastName
end note
kafka -> userManage: PUB create-user
userManage -> database: GET /user-information/:email
database ---> userManage: response 
alt account not exist
    userManage -> userManage: create account
    userManage -> database: POST /create-user
    "database" ---> userManage: response payload message
    note right of userManage
        payload: message, code
    end note 
    userManage ---> kafka: PUB create-user-result (success)
else account exist
    userManage ---> kafka: PUB create-user-result (failure)
end
kafka ---> bff: PUB create-user-result
bff --> frontEnd: response status

== User Sign in ==
user -> frontEnd : user enter
frontEnd -> bff :  POST /authorized-user
bff -> userManage: POST /authorized-user
userManage -> database: POST /authorized-user
database --> userManage : respone information
userManage -> userManage: check account exist
alt account exist
userManage ---> userManage: validate user
note right of userManage 
    check account exist then check password is correct and
    password must be encrypt
end note

alt authorized success
    userManage ---> userManage: authorized success
    userManage ---> bff: respone information
else authorized failure
    userManage ---> userManage: authorized failure
    userManage ---> bff: respone failure
end
else account not exist
userManage ---> bff: response not found user
end

bff --> frontEnd :  respone information


@enduml